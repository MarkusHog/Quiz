@page "/"
@using Quiz.Models
@using Quiz.Data
@inject IRestDataService IRestDataService

<PageTitle>Quiz</PageTitle>


@if (currentQuestionIndex < questions.Count)
{
    <div>
        <h1>@questions[currentQuestionIndex].QuizQuestion</h1>
        <br />
        <div class="m-3">
            <label for="optionA" class="h2">A. @questions[currentQuestionIndex].IncorrectAnswer1</label>
            <input type="radio" name="selectedAnswer" id="optionA" value="@questions[currentQuestionIndex].IncorrectAnswer1" checked="@IsAnswerSelected(questions[currentQuestionIndex], questions[currentQuestionIndex].IncorrectAnswer1)" @onchange="@(() => SelectAnswer(questions[currentQuestionIndex], questions[currentQuestionIndex].IncorrectAnswer1))" class="m-2" />
        </div>
        <div class="m-3">
            <label for="optionB" class="h2">B. @questions[currentQuestionIndex].CorrectAnswer</label>
            <input type="radio" name="selectedAnswer" id="optionB" value="@questions[currentQuestionIndex].CorrectAnswer" checked="@IsAnswerSelected(questions[currentQuestionIndex], questions[currentQuestionIndex].CorrectAnswer)" @onchange="@(() => SelectAnswer(questions[currentQuestionIndex], questions[currentQuestionIndex].CorrectAnswer))" class="m-2" />
        </div>
        <div class="m-3">
            <label for="optionC" class="h2">C. @questions[currentQuestionIndex].IncorrectAnswer2</label>
            <input type="radio" name="selectedAnswer" id="optionC" value="@questions[currentQuestionIndex].IncorrectAnswer2" checked="@IsAnswerSelected(questions[currentQuestionIndex], questions[currentQuestionIndex].IncorrectAnswer2)" @onchange="@(() => SelectAnswer(questions[currentQuestionIndex], questions[currentQuestionIndex].IncorrectAnswer2))" class="m-2" />
        </div>
        <div class="m-3">
            <label for="optionD" class="h2">D. @questions[currentQuestionIndex].IncorrectAnswer3</label>
            <input type="radio" name="selectedAnswer" id="optionD" value="@questions[currentQuestionIndex].IncorrectAnswer3" checked="@IsAnswerSelected(questions[currentQuestionIndex], questions[currentQuestionIndex].IncorrectAnswer3)" @onchange="@(() => SelectAnswer(questions[currentQuestionIndex], questions[currentQuestionIndex].IncorrectAnswer3))"class="m-2" />
        </div>
        <div class="m-3">
            <label for="optionE" class="h2">E. @questions[currentQuestionIndex].IncorrectAnswer4</label>
            <input type="radio" name="selectedAnswer" id="optionE" value="@questions[currentQuestionIndex].IncorrectAnswer4" checked="@IsAnswerSelected(questions[currentQuestionIndex], questions[currentQuestionIndex].IncorrectAnswer4)" @onchange="@(() => SelectAnswer(questions[currentQuestionIndex], questions[currentQuestionIndex].IncorrectAnswer4))" class="m-2" />
        </div>

        <button @onclick="NextQuestion" class="btn btn-primary m-3" Size="Size.Large">Next</button>
    </div>
}
else
{
    <p>Quiz Avslutat!</p>
    <p>Antal rätt svar: @totalCorrectAnswers</p>
}

@code
{
    List<Question> questions = new List<Question>();

    int currentQuestionIndex = 0;
    int totalCorrectAnswers = 0;

    //protected override void OnInitialized()
    //{
    //    questions = new List<Question>()
    //    {
    //        new Question()
    //        {
    //            Id = Guid.NewGuid(),
    //            QuizQuestion = "Vilken är världens största öken?",
    //            CorrectAnswer = "Sahara",
    //            IncorrectAnswer1 = "Arabiska öknen",
    //            IncorrectAnswer2 = "Gobiöknen",
    //            IncorrectAnswer3 = "Kalahariöknen",
    //            IncorrectAnswer4 = "Patagoniska öknen",
    //            Correct = false,
    //            ChoosenAnswer = "",
    //            NumberOfCorrectAnswer = 0
    //        },
    //        new Question()
    //        {
    //            Id = Guid.NewGuid(),
    //            QuizQuestion = "Vad heter Europas högsta berg?",
    //            CorrectAnswer = "Elbrus",
    //            IncorrectAnswer1 = "Dent Blanche",
    //            IncorrectAnswer2 = "Matterhorn",
    //            IncorrectAnswer3 = "Weisshorn",
    //            IncorrectAnswer4 = "Lyskamm",
    //            Correct = false,
    //            ChoosenAnswer = "",
    //            NumberOfCorrectAnswer = 0
    //        },
    //        new Question()
    //        {
    //            Id = Guid.NewGuid(),
    //            QuizQuestion = "Vad är världens största djur?",
    //            CorrectAnswer = "Blåval",
    //            IncorrectAnswer1 = "Stillahavsnordkapare",
    //            IncorrectAnswer2 = "Kolossbläckfisk",
    //            IncorrectAnswer3 = "Späckhuggare",
    //            IncorrectAnswer4 = "Elefant",
    //            Correct = false,
    //            ChoosenAnswer = "",
    //            NumberOfCorrectAnswer = 0
    //        }
    //    };
    //}

	protected override async Task OnInitializedAsync()
	{
		questions = await IRestDataService.GetAllQuestionAsync();
		
	}

	bool IsAnswerSelected(Question question, string answer)
    {
        return question.ChoosenAnswer == answer;
    }

    void SelectAnswer(Question question, string selectedAnswer)
    {
        question.ChoosenAnswer = selectedAnswer;
    }

    void NextQuestion()
    {
        if (currentQuestionIndex < questions.Count)
        {
            if (questions[currentQuestionIndex].ChoosenAnswer == questions[currentQuestionIndex].CorrectAnswer)
            {
                questions[currentQuestionIndex].Correct = true;
                questions[currentQuestionIndex].NumberOfCorrectAnswer++;
                totalCorrectAnswers++;
            }

            currentQuestionIndex++;
        }
    }
}
